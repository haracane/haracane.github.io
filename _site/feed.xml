<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://blog.enogineer.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://blog.enogineer.com/" rel="alternate" type="text/html" /><updated>2023-06-21T10:57:57+09:00</updated><id>http://blog.enogineer.com/feed.xml</id><title type="html">haracaneのブログ</title><subtitle>プロダクト開発が好きなプログラマのブログです。 RubyとTypeScriptによくお世話になっています。</subtitle><entry><title type="html">Repositoryパターンの全件取得処理を型と関数で実装してみた</title><link href="http://blog.enogineer.com/2023/06/21/repository-hook-find-all/" rel="alternate" type="text/html" title="Repositoryパターンの全件取得処理を型と関数で実装してみた" /><published>2023-06-21T09:00:00+09:00</published><updated>2023-06-21T09:00:00+09:00</updated><id>http://blog.enogineer.com/2023/06/21/repository-hook-find-all</id><content type="html" xml:base="http://blog.enogineer.com/2023/06/21/repository-hook-find-all/"><![CDATA[<p><a href="/tags/typescript/">TypeScript</a> / <a href="/tags/hook/">フック</a> / <a href="/tags/repository-pattern/">Repositoryパターン</a></p>

<p>これまでTypeScriptでRepositoryパターンを実装する時にオブジェクト指向で実装してたんですが、型と関数でも実装してみました。</p>

<p>まずは手始めに全件取得処理を型と関数で実装してみます。</p>

<h2 id="repositoryの共通部分をフックで実装する">Repositoryの共通部分をフックで実装する</h2>

<p>まずはRepositoryの共通部分を実装してみます。</p>

<p>Repositoryを型と関数で実装する場合、個別のテーブルやスキーマ情報をフックできる関数を作ると扱いやすいです。</p>

<p>レコードを全件取得するRepositoryの実装例はこんな感じになります。</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">useFindAllRepository</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">RECORD</span><span class="p">,</span> <span class="nx">MODEL</span><span class="o">&gt;</span><span class="p">(</span>
  <span class="nx">table</span><span class="p">:</span> <span class="nx">PrismaClient</span><span class="p">,</span>
  <span class="nx">schema</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">toModel</span><span class="p">:</span> <span class="p">(</span><span class="nx">record</span><span class="p">:</span> <span class="nx">RECORD</span><span class="p">):</span> <span class="nx">MODEL</span>
  <span class="p">}</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">findAll</span><span class="p">:</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">MODEL</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// フックしたtableを使ってレコードを全件取得する</span>
    <span class="kd">const</span> <span class="na">records</span><span class="p">:</span> <span class="nx">RECORD</span><span class="p">[]</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">table</span><span class="p">.</span><span class="nf">findMany</span><span class="p">()</span>

    <span class="c1">// フックしたスキーマを使ってモデルに変換する</span>
    <span class="k">return</span> <span class="nx">records</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">schema</span><span class="p">.</span><span class="nx">toModel</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">as</span> <span class="kd">const</span><span class="p">)</span>
</code></pre></div></div>

<p>useRepository 関数はテーブルとスキーマ(load関数だけですが)を受け取って、findAll関数を持つオブジェクトを返しています。</p>

<h2 id="userrepositoryをフックで実装する">UserRepositoryをフックで実装する</h2>

<p>次はUserRepositoryです。</p>

<p>さっそく先ほどのuseFindAllRepositoryを使って実装してみます。</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">id</span><span class="p">:</span> <span class="kr">number</span>
  <span class="na">email</span><span class="p">:</span> <span class="kr">string</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">useUserRepository</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">findAll</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useFindAllRepository</span><span class="o">&lt;</span><span class="nx">Users</span><span class="p">,</span> <span class="nx">User</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="nx">prisma</span><span class="p">.</span><span class="nx">users</span><span class="p">,</span>
    <span class="p">{</span>
      <span class="na">load</span><span class="p">:</span> <span class="p">(</span><span class="na">record</span><span class="p">:</span> <span class="nx">Users</span><span class="p">):</span> <span class="nx">User</span> <span class="o">=&gt;</span>
        <span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">email</span><span class="p">:</span> <span class="nx">record</span><span class="p">.</span><span class="nx">email</span> <span class="p">}),</span>
    <span class="p">}</span>
  <span class="p">)</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">findAll</span> <span class="p">}</span> <span class="k">as</span> <span class="kd">const</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">UserRepository</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">useUserRepository</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>このように、useFindAllRepositoryにUserのテーブルとスキーマを渡してあげるとUserの配列を返すfindAll関数が取得できるので、その関数をそのまま使えばUserRepositoryを実装できます。</p>

<h3 id="retutntypeを使ったuserrepository型の定義">RetutnTypeを使ったUserRepository型の定義</h3>

<p>UserRepository型の定義にはReturnTypeを使っています。</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">UserRepository</span> <span class="o">=</span> <span class="nb">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">useUserRepository</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>ReturnTypeは戻り値の型を返すUtility Typeです。</p>

<p>ここではUserRepositoryの型が、useUserRepository関数の戻り値の型である</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">findAll</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">User</span><span class="p">[]</span><span class="o">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>となります。</p>

<p>ReturnTypeについて詳しく知りたい方は<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype">公式ドキュメント</a>もご覧ください。</p>

<h2 id="まとめ">まとめ</h2>

<p>やってみたらRepositoryパターンは意外と簡単に型と関数で実装できました。</p>

<p>今回は引数を受け取らないfindAll関数のみの実装でしたが、次はIDなどの引数を受け取るパターンも実装してみようと思います。</p>]]></content><author><name></name></author><category term="TypeScript" /><category term="フック" /><category term="Repositoryパターン" /><summary type="html"><![CDATA[これまでオブジェクト指向でRepositoryパターンの実装をしてたんですが、今回はRepositoryパターンの全件取得処理を型と関数で実装してみました。]]></summary></entry><entry><title type="html">PreloadResolverという仕組みを作ってGraphQLのN+1問題に対応した話</title><link href="http://blog.enogineer.com/2022/12/01/exawizards-preload-resolver/" rel="alternate" type="text/html" title="PreloadResolverという仕組みを作ってGraphQLのN+1問題に対応した話" /><published>2022-12-01T10:00:00+09:00</published><updated>2022-12-01T10:00:00+09:00</updated><id>http://blog.enogineer.com/2022/12/01/exawizards-preload-resolver</id><content type="html" xml:base="http://blog.enogineer.com/2022/12/01/exawizards-preload-resolver/"><![CDATA[<p><a href="/tags/graphql/">GraphQL</a> / <a href="/tags/typescript/">TypeScript</a> / <a href="/tags/test/">テスト</a> / <a href="/tags/hanasuto/">ハナスト</a> / <a href="/tags/exawizards/">エクサウィザーズ</a></p>

<p>エクサウィザーズのTechBlogに記事を書きました(2回目)。</p>

<ul>
  <li><a href="https://techblog.exawizards.com/entry/2022/12/01/154745" target="_blank">PreloadResolverという仕組みを作ってGraphQLのN+1問題に対応した話</a></li>
</ul>

<p>GraphQLでバックエンドを実装する際に避けては通れないN+1問題対応の話です。</p>]]></content><author><name></name></author><category term="GraphQL" /><category term="TypeScript" /><category term="テスト" /><category term="ハナスト" /><category term="エクサウィザーズ" /><summary type="html"><![CDATA[エクサウィザーズのTechBlogに「PreloadResolverという仕組みを作ってGraphQLのN+1問題に対応した話」というタイトルで記事を書きました。]]></summary></entry><entry><title type="html">エクサウィザーズのTLが実践する、開発が遅くならないテストの書き方</title><link href="http://blog.enogineer.com/2022/08/22/exawizards-test/" rel="alternate" type="text/html" title="エクサウィザーズのTLが実践する、開発が遅くならないテストの書き方" /><published>2022-08-22T10:00:00+09:00</published><updated>2022-08-22T10:00:00+09:00</updated><id>http://blog.enogineer.com/2022/08/22/exawizards-test</id><content type="html" xml:base="http://blog.enogineer.com/2022/08/22/exawizards-test/"><![CDATA[<p><a href="/tags/test/">テスト</a> / <a href="/tags/jest/">Jest</a> / <a href="/tags/typescript/">TypeScript</a> / <a href="/tags/hanasuto/">ハナスト</a> / <a href="/tags/exawizards/">エクサウィザーズ</a></p>

<p>エクサウィザーズのTechBlogに記事を書きました。</p>

<ul>
  <li><a href="https://techblog.exawizards.com/entry/2022/08/22/172230" target="_blank">エクサウィザーズのTLが実践する、開発が遅くならないテストの書き方</a></li>
</ul>

<p>普段テストを書く際に気を付けていることをまとめてみました。</p>]]></content><author><name></name></author><category term="テスト" /><category term="Jest" /><category term="TypeScript" /><category term="ハナスト" /><category term="エクサウィザーズ" /><summary type="html"><![CDATA[エクサウィザーズのTechBlogに「エクサウィザーズのTLが実践する、開発が遅くならないテストの書き方」というタイトルで記事を書きました。]]></summary></entry><entry><title type="html">エクサウィザーズにジョインしました</title><link href="http://blog.enogineer.com/2020/09/01/exawizards/" rel="alternate" type="text/html" title="エクサウィザーズにジョインしました" /><published>2020-09-01T10:00:00+09:00</published><updated>2020-09-01T10:00:00+09:00</updated><id>http://blog.enogineer.com/2020/09/01/exawizards</id><content type="html" xml:base="http://blog.enogineer.com/2020/09/01/exawizards/"><![CDATA[<p><a href="/tags/information/">報告</a> / <a href="/tags/exawizards/">エクサウィザーズ</a></p>

<p>ソフトウェアエンジニアとしてエクサウィザーズにジョインしました。</p>

<p>エクサウィザーズでは社会課題解決のためのプロダクト開発をやっていきます。</p>

<p>よろしくお願いします。</p>]]></content><author><name></name></author><category term="報告" /><category term="エクサウィザーズ" /><summary type="html"><![CDATA[ソフトウェアエンジニアとしてエクサウィザーズにジョインしました。]]></summary></entry><entry><title type="html">アメフト観戦のグループチケットサービスをFanForwardでリリースしました</title><link href="http://blog.enogineer.com/2018/11/19/release-group-ticket/" rel="alternate" type="text/html" title="アメフト観戦のグループチケットサービスをFanForwardでリリースしました" /><published>2018-11-19T10:00:00+09:00</published><updated>2018-11-19T10:00:00+09:00</updated><id>http://blog.enogineer.com/2018/11/19/release-group-ticket</id><content type="html" xml:base="http://blog.enogineer.com/2018/11/19/release-group-ticket/"><![CDATA[<p><a href="/tags/fanforward/">FanForward</a> / <a href="/tags/rails/">Rails</a> / <a href="/tags/heroku/">Heroku</a></p>

<p>FanForwardにjoinしてからの第一弾サービスとしてグループチケットサービスをリリースしました。</p>

<p><a href="https://kcafl.group-ticket.jp/wjb/">ウエスタンジャパンボウル2018のグループチケット</a></p>

<h2 id="グループチケットって">グループチケットって？</h2>

<p>FanForwardのグループチケットはグループ観戦がお得に＆簡単にできるサービスです。</p>

<p>特徴はこんな感じです。</p>

<ul>
  <li>グループ割引で観戦できる。ウエスタンジャパンボウルでは最大400円安くなります。</li>
  <li>幹事ではなく各参加者が決済する。ので幹事が楽。</li>
  <li>参加者が集まらなければ自動的にキャンセルされる。ので幹事が楽。</li>
  <li>特典がついてくる。ウエスタンジャパンボウルの場合は<a href="https://kcafl.group-ticket.jp/group_bonuses/field_tour/">フィールドツアーができます</a></li>
</ul>

<p>詳しくは是非<a href="https://kcafl.group-ticket.jp/wjb/">ウエスタンジャパンボウル2018のグループチケットサイト</a>を見てみてください。</p>

<p>ちなみにRails + Herokuで実装＆運用しています。</p>

<h2 id="ウエスタンジャパンボウルって">ウエスタンジャパンボウルって？</h2>

<p>ウエスタンジャパンボウルは、全日本大学アメフトの決勝戦「毎日甲子園ボウル」の出場権をかけた西日本代表校決定戦です。</p>

<p>この大会は2016年にリニューアルされた大会で、過去2年とも関西学院大学ファイターズと立命館大学パンサーズの対戦になっています。</p>

<p>過去の大会では2016年、2017年ともに関西学院大学が勝利して甲子園ボウルへの出場権を獲得しました。</p>

<p>ちなみに2017年の甲子園ボウルではあの内田監督率いる日大と戦って23-17で敗れています。</p>

<p>今年は色々あった関西学院大学ですが、ウエスタンジャパンボウルに勝利して甲子園ボウルに出場し、日本一になれるかが結構注目ポイントです。</p>

<p>立命館大学も去年は関西学生リーグで1位だったにも関わらず2位の関西学院大学に敗れてしまったので、こちらも結構負けられない感じになってたりします。</p>

<h2 id="fanforwardって">FanForwardって？</h2>

<p>ついでにFanForwardの紹介をすると、原宿の<a href="https://www.asahi.com/articles/ASKCN3JQ5KCNUTQP00T.html">「スポーツトキワ荘」</a>の中にあるスポーツTechベンチャーで、テクノロジーでチームとファンを一つにすることを目指している感じの会社です。</p>

<p>これまでプロ野球、バドミントン、アメフトといったスポーツの観戦体験の向上に取り組んできました。</p>

<p>ちなみに社内エンジニアは僕一人です。どこかにCTOやってくれる人いないですかね。。</p>

<p>まだまだ小さい会社ですが、東京オリンピックがあったりしてスポーツは盛り上がってきてますし会社としては結構面白いフェーズですよ。</p>

<h2 id="まとめ">まとめ</h2>

<p>ということでこの日なら大阪でグループでアメフト観戦してもいいかな、という人は是非使ってみてください！</p>

<p>FanForwardに興味がある方も是非遊びに来てください！DMウェルカムです。</p>]]></content><author><name></name></author><category term="FanForward" /><category term="Rails" /><category term="Heroku" /><summary type="html"><![CDATA[グループチケットサービスをFanForwardからリリースしました。アメフトをグループ観戦できますよ。というか報告していませんでしたが、10/1からスポーツTechベンチャー FanForwardにjoinしてました。12/2(日)に大阪の万博記念公園で開催されるウエスタンジャパンボウル2018をグループ観戦される方は使ってみてください。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.enogineer.com/rails.png" /><media:content medium="image" url="http://blog.enogineer.com/rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">FanForwardにジョインしました</title><link href="http://blog.enogineer.com/2018/10/01/fanforward/" rel="alternate" type="text/html" title="FanForwardにジョインしました" /><published>2018-10-01T10:00:00+09:00</published><updated>2018-10-01T10:00:00+09:00</updated><id>http://blog.enogineer.com/2018/10/01/fanforward</id><content type="html" xml:base="http://blog.enogineer.com/2018/10/01/fanforward/"><![CDATA[<p><a href="/tags/information/">報告</a> / <a href="/tags/fanforward/">FanForward</a></p>

<p>リードエンジニアとしてFanForwardにジョインしました。</p>

<p>スポーツを盛り上げるプロダクト開発をする予定です。</p>

<p>よろしくお願いします。</p>]]></content><author><name></name></author><category term="報告" /><category term="FanForward" /><summary type="html"><![CDATA[リードエンジニアとしてFanForwardにジョインしました。]]></summary></entry><entry><title type="html">RailsとElasticsearchとkaminariの組み合わせで気をつけること</title><link href="http://blog.enogineer.com/2016/12/17/elasticsearch-rails-kaminari/" rel="alternate" type="text/html" title="RailsとElasticsearchとkaminariの組み合わせで気をつけること" /><published>2016-12-17T09:32:21+09:00</published><updated>2016-12-17T09:32:21+09:00</updated><id>http://blog.enogineer.com/2016/12/17/elasticsearch-rails-kaminari</id><content type="html" xml:base="http://blog.enogineer.com/2016/12/17/elasticsearch-rails-kaminari/"><![CDATA[<p><a href="/tags/rails/">Rails</a> / <a href="/tags/elasticsearch/">Elasticsearch</a></p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2016/ruby_on_rails">Ruby on Rails Advent Calendar 2016</a>の17日目です。</p>

<p>RailsでElasticsearchといえば<a href="https://github.com/elastic/elasticsearch-rails">elasticsearch-rails</a>ですね。</p>

<p>今回はelasticsearch-railsと<a href="https://github.com/amatsuda/kaminari">kaminari</a>を合わせて使う時に押さえておいた方が良いことをまとめてみました。</p>

<p>ただ、基本的には<a href="https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/README.md#search-results-as-database-records">ドキュメントにも書いてある</a>ことなのでちゃんとドキュメントを読んでおいた方が良いです。</p>

<h2 id="検索結果をarelオブジェクトとして扱うと順番が変わる">検索結果をArelオブジェクトとして扱うと順番が変わる</h2>

<p>まず前準備として、これは<a href="https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/README.md#search-results-as-database-records">ドキュメントにも書いてあること</a>なのですが</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">records</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">records</span>
<span class="n">records</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Elasticsearch::Model::Response::Records</span>
<span class="n">records</span><span class="p">.</span><span class="nf">ids</span> <span class="c1"># =&gt; ["3", "2", "1"]</span></code></pre></figure>

<p>という結果を取得した時に</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">arel</span> <span class="o">=</span> <span class="n">records</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:user_category</span><span class="p">)</span>
<span class="n">arel</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Tag::ActiveRecord_Relation</span>
<span class="n">arel</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span> <span class="c1"># =&gt; [1, 2, 3]</span></code></pre></figure>

<p>と、Arelオブジェクトとして評価してしまうと順番が維持されません。</p>

<p>ドキュメントには<code class="language-plaintext highlighter-rouge">to_a</code>を使うようにと書いてあるのでそうしましょう。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">User</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">records</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:user_category</span><span class="p">).</span><span class="nf">to_a</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span> <span class="c1"># =&gt; [3, 2, 1]</span></code></pre></figure>

<h2 id="elasticsearch-railsとkaminariと合わせて使う">elasticsearch-railsとkaminariと合わせて使う</h2>

<p>こちらも<a href="https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/README.md#pagination">ドキュメントに書いてある</a>のですが、elasticsearch-railsは<a href="https://github.com/amatsuda/kaminari">kaminari</a>や<a href="https://github.com/mislav/will_paginate">will_paginate</a>と合わせて使うことができます。</p>

<p>例えばこんな感じです</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">records</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">page</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">per</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nf">records</span>
<span class="n">records</span><span class="p">.</span><span class="nf">current_page</span> <span class="c1"># =&gt; 1</span>
<span class="n">records</span><span class="p">.</span><span class="nf">limit_value</span>  <span class="c1"># =&gt; 10</span>
<span class="n">records</span><span class="p">.</span><span class="nf">total_count</span>  <span class="c1"># =&gt; 3</span></code></pre></figure>

<p>ここまでは特に問題ありません。</p>

<h2 id="検索結果をarelオブジェクトとして扱うkaminariと合わせて使う">検索結果をArelオブジェクトとして扱う＆kaminariと合わせて使う</h2>

<p>検索結果をArelオブジェクトとして扱いたくて、さらにページングもやりたいという時は問題が起きます。</p>

<p>普通に書くと</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">records</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">page</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">per</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nf">records</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:user_category</span><span class="p">).</span><span class="nf">to_a</span></code></pre></figure>

<p>となりますが、<code class="language-plaintext highlighter-rouge">to_a</code>で返ってくるのは<code class="language-plaintext highlighter-rouge">Array</code>オブジェクトなので、ページング情報が失われてしまいます。</p>

<p>この場合は少し面倒ですが、こんな感じにする必要があります。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">records</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">page</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">per</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nf">records</span>
<span class="n">records</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Elasticsearch::Model::Response::Records</span>
<span class="n">kaminari_options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">limit: </span><span class="n">records</span><span class="p">.</span><span class="nf">limit_value</span><span class="p">,</span>
  <span class="ss">offset: </span><span class="n">records</span><span class="p">.</span><span class="nf">offset_value</span><span class="p">,</span>
  <span class="ss">total_count: </span><span class="n">records</span><span class="p">.</span><span class="nf">total_count</span>
<span class="p">}</span>
<span class="n">arel</span> <span class="o">=</span> <span class="n">records</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:user_category</span><span class="p">)</span>
<span class="n">paginatable_array</span> <span class="o">=</span> <span class="no">Kaminari</span><span class="p">.</span><span class="nf">paginate_array</span><span class="p">(</span><span class="n">arel</span><span class="p">.</span><span class="nf">to_a</span><span class="p">,</span> <span class="n">kaminari_options</span><span class="p">)</span>
<span class="n">paginatable_array</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Kaminari::PaginatableArray</span>
<span class="n">paginatable_array</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span> <span class="c1"># =&gt; [3, 2, 1]</span></code></pre></figure>

<p>ただ、これをそのままメソッド化してしまうと<code class="language-plaintext highlighter-rouge">Arel</code>オブジェクトのメソッドチェーンを自由にできないので、こんな感じにしておくと良いと思います。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">BaseSearcher</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
    <span class="vi">@params</span> <span class="o">=</span> <span class="n">params</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:page</span><span class="p">]</span> <span class="o">||</span> <span class="mi">1</span>
    <span class="n">per</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="ss">:per</span><span class="p">]</span> <span class="o">||</span> <span class="mi">10</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="vi">@params</span><span class="p">).</span><span class="nf">page</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">per</span><span class="p">(</span><span class="n">per</span><span class="p">).</span><span class="nf">records</span>
    <span class="n">kaminari_options</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">limit: </span><span class="n">records</span><span class="p">.</span><span class="nf">limit_value</span><span class="p">,</span>
      <span class="ss">offset: </span><span class="n">records</span><span class="p">.</span><span class="nf">offset_value</span><span class="p">,</span>
      <span class="ss">total_count: </span><span class="n">records</span><span class="p">.</span><span class="nf">total_count</span>
    <span class="p">}</span>
    <span class="n">records</span> <span class="o">=</span> <span class="k">yield</span><span class="p">(</span><span class="n">records</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
    <span class="no">Kaminari</span><span class="p">.</span><span class="nf">paginate_array</span><span class="p">(</span><span class="n">arel</span><span class="p">.</span><span class="nf">to_a</span><span class="p">,</span> <span class="n">kaminari_options</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">module</span> <span class="nn">Users</span>
  <span class="k">class</span> <span class="nc">Searcher</span> <span class="o">&lt;</span> <span class="no">BaseSearcher</span>
    <span class="k">def</span> <span class="nf">model</span>
      <span class="no">User</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>使い方はこんな感じですね</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">records</span> <span class="o">=</span> <span class="no">Users</span><span class="o">::</span><span class="no">Searcher</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">sort: </span><span class="p">{</span><span class="ss">id: :desc</span><span class="p">}).</span><span class="nf">search</span><span class="p">(</span><span class="ss">page: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">per: </span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">scope</span><span class="o">|</span> <span class="n">scope</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="ss">:user_category</span><span class="p">)</span> <span class="p">}</span>
<span class="n">records</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span>    <span class="c1"># =&gt; [3, 2, 1]</span>
<span class="n">records</span><span class="p">.</span><span class="nf">current_page</span> <span class="c1"># =&gt; 1</span>
<span class="n">records</span><span class="p">.</span><span class="nf">limit_value</span>  <span class="c1"># =&gt; 10</span>
<span class="n">records</span><span class="p">.</span><span class="nf">total_count</span>  <span class="c1"># =&gt; 3</span></code></pre></figure>

<h2 id="まとめ">まとめ</h2>

<p>ドキュメントはちゃんと読みましょう。</p>]]></content><author><name></name></author><category term="Rails" /><category term="Elasticsearch" /><summary type="html"><![CDATA[RailsでElasticsearchと言えばelasticsearch-rails gemの出番ですが、kaminariと組み合わせる時に気をつけた方が良いことをまとめてみました。小ネタです。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.enogineer.com/rails.png" /><media:content medium="image" url="http://blog.enogineer.com/rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Railsのレスポンス遅延を通知する</title><link href="http://blog.enogineer.com/2015/12/13/notify-rails-slow-response/" rel="alternate" type="text/html" title="Railsのレスポンス遅延を通知する" /><published>2015-12-13T09:32:21+09:00</published><updated>2015-12-13T09:32:21+09:00</updated><id>http://blog.enogineer.com/2015/12/13/notify-rails-slow-response</id><content type="html" xml:base="http://blog.enogineer.com/2015/12/13/notify-rails-slow-response/"><![CDATA[<p><a href="/tags/rails/">Rails</a></p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/rails">Ruby on Rails Advent Calendar 2015</a>の13日目です。</p>

<h2 id="active-support-instrumentationとは">Active Support Instrumentationとは</h2>

<p>ざっくり言うと「Railsアプリケーションやフレームワーク内のアクションを計測するためのAPI」です。</p>

<p>この仕組みを使うと、コントローラのアクション実行やSQL実行などをフックすることができます。</p>

<p>今回はこのInstrumentationの仕組みを使ってレスポンス遅延の監視を行います。</p>

<h2 id="アクションを監視する">アクションを監視する</h2>

<p>アクションを監視するには提供されているフックを<code class="language-plaintext highlighter-rouge">subscribe</code>します。</p>

<p>アクションのフックは<code class="language-plaintext highlighter-rouge">process_action.action_controller</code>という名前なので</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/initializers/subscribe_process_action_action_controller.rb</span>
<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="p">.</span><span class="nf">subscribe</span> <span class="s2">"process_action.action_controller"</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
<span class="k">end</span></code></pre></figure>

<p>という感じのファイルを用意するとアクションを監視できます。</p>

<h2 id="レスポンス遅延の場合に通知する">レスポンス遅延の場合に通知する</h2>

<p>subscribeした時のブロック引数にレスポンス情報が入っているので、レスポンス時間が長過ぎる場合に通知をしてみます。</p>

<p>ブロック引数はそのまま<code class="language-plaintext highlighter-rouge">ActiveSupport::Notifications::Event.new</code>の引数になるので、まずは<code class="language-plaintext highlighter-rouge">ActiveSupport::Notifications::Event</code>オブジェクトを作成します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="p">.</span><span class="nf">subscribe</span> <span class="s2">"process_action.action_controller"</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
  <span class="n">event</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">::</span><span class="no">Event</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">event</code>オブジェクトを取得したら、<code class="language-plaintext highlighter-rouge">event.duration</code>で取得できるレスポンス時間(単位はミリ秒)が10秒以上かかっているか判定します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="p">.</span><span class="nf">subscribe</span> <span class="s2">"process_action.action_controller"</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
  <span class="n">event</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">::</span><span class="no">Event</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nf">duration</span> <span class="o">&gt;</span> <span class="mi">10_000</span>
    <span class="c1">## ここで通知処理</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="メールチャットで通知">メール/チャットで通知</h2>

<p>あとは通知処理をすればOKです。</p>

<p>ただし、フック処理が終わるまでアクションが終了しないので、通知処理で邪魔しないように非同期で通知するようにしましょう。</p>

<p>例えば<code class="language-plaintext highlighter-rouge">Resque</code>を使っている場合は</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="p">.</span><span class="nf">subscribe</span> <span class="s2">"process_action.action_controller"</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
  <span class="n">event</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">::</span><span class="no">Event</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nf">duration</span> <span class="o">&gt;</span> <span class="mi">10_000</span>
    <span class="no">Resque</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span>
      <span class="no">SlowResponseNotifyJob</span><span class="p">,</span>
      <span class="ss">time: </span><span class="n">event</span><span class="p">.</span><span class="nf">time</span><span class="p">,</span>
      <span class="ss">duration: </span><span class="s2">"</span><span class="si">#{</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">duration</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s2">sec"</span><span class="p">}.</span><span class="nf">merge</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">payload</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>という感じにすると良いかと思います。</p>

<p>あとは<code class="language-plaintext highlighter-rouge">SlowResponseNotifyJob</code>クラスを実装してメールなりSlackなりHipchatなりに通知するようにしましょう。</p>

<h2 id="おまけスロークエリの通知">おまけ：スロークエリの通知</h2>

<p>Instrumentation機能を使うとSQL実行遅延の通知もできます。</p>

<p>SQL実行のhook名は<code class="language-plaintext highlighter-rouge">sql.active_record</code>なので</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/initializer/subscribe_sql_active_record.rb</span>
<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="p">.</span><span class="nf">subscribe</span> <span class="s2">"sql.active_record"</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
  <span class="n">event</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">::</span><span class="no">Event</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nf">duration</span> <span class="o">&gt;</span> <span class="mi">10_000</span>
    <span class="no">Resque</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span>
      <span class="no">SlowQueryNotifyJob</span><span class="p">,</span>
      <span class="ss">time: </span><span class="n">event</span><span class="p">.</span><span class="nf">time</span><span class="p">,</span>
      <span class="ss">duration: </span><span class="s2">"</span><span class="si">#{</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">duration</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">).</span><span class="nf">round</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s2">sec"</span><span class="p">}.</span><span class="nf">merge</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">payload</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>という感じにすればOKです。</p>

<p>他にも色々なフックがあるので<a href="http://edgeguides.rubyonrails.org/active_support_instrumentation.html">Active Support Intrumentationのドキュメント</a>を参考に、必要な監視を設定してみてください。</p>]]></content><author><name></name></author><category term="Rails" /><summary type="html"><![CDATA[Railsを運用しているとレスポンスタイムの監視は欠かせません。New Relicなどを使って監視している方が多いかと思いますが、今回はActive SupportのInstrumentation機能を使って10秒以上のレスポンスを通知するシンプルな方法をご紹介します。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.enogineer.com/rails.png" /><media:content medium="image" url="http://blog.enogineer.com/rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">RSpecでDatabaseCleanerを使っているのにAUTOCOMMITされたデータが残る場合の対処</title><link href="http://blog.enogineer.com/2015/12/03/database-cleaner-config-for-autocommit/" rel="alternate" type="text/html" title="RSpecでDatabaseCleanerを使っているのにAUTOCOMMITされたデータが残る場合の対処" /><published>2015-12-03T08:05:44+09:00</published><updated>2015-12-03T08:05:44+09:00</updated><id>http://blog.enogineer.com/2015/12/03/database-cleaner-config-for-autocommit</id><content type="html" xml:base="http://blog.enogineer.com/2015/12/03/database-cleaner-config-for-autocommit/"><![CDATA[<p><a href="/tags/rspec/">RSpec</a> / <a href="/tags/rails/">Rails</a> / <a href="/tags/ruby/">Ruby</a></p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/rails">Ruby on Rails Advent Calendar 2015</a>の3日目です。</p>

<h2 id="databasecleanerでテスト実行毎にデータを削除する">DatabaseCleanerでテスト実行毎にデータを削除する</h2>

<p>RSpecでテストをする際に、各テストケースの実行毎にデータベースの状態をクリアしてくれる<a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a>というgemがあります。</p>

<p>このgemはとても便利で、<code class="language-plaintext highlighter-rouge">rails_helper.rb</code>に以下のような感じで設定しておくと他のテストの影響を受けずに各テストケースを実行できます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>

  <span class="n">except_tables</span> <span class="o">=</span> <span class="sx">%w(blog_categories)</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># db/seeds.rbでblog_categoriesテーブルのデータを設定</span>
    <span class="nb">load</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'db'</span><span class="p">,</span> <span class="s1">'seeds.rb'</span><span class="p">)</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean_with</span><span class="p">(</span><span class="ss">:truncation</span><span class="p">,</span> <span class="ss">except: </span><span class="n">except_tables</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span><span class="p">,</span> <span class="p">{</span><span class="ss">except: </span><span class="n">except_tables</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">start</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean</span>
  <span class="k">end</span>

  <span class="c1">## スマホ版のfeature specを書く場合などは以下の設定もしておく</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">type: :mobile</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Capybara</span><span class="p">.</span><span class="nf">current_driver</span> <span class="o">=</span> <span class="ss">:mobile_client</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">type: :mobile</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Capybara</span><span class="p">.</span><span class="nf">use_default_driver</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="databasecleanerのautocommit問題">DatabaseCleanerのAUTOCOMMIT問題</h2>

<p>ただ、transaction strategyで実行している場合は<code class="language-plaintext highlighter-rouge">DatabaseCleaner.clean</code>実行後も<code class="language-plaintext highlighter-rouge">AUTOCOMMIT</code>されたデータが削除されません。</p>

<p>そのため「個別にテストを実行すると成功するのに<code class="language-plaintext highlighter-rouge">rake spec</code>では失敗する」といったことが起きてしまう場合があります。</p>

<h2 id="autocommit問題の対策">AUTOCOMMIT問題の対策</h2>

<p>で、そのための対策なのですが、<code class="language-plaintext highlighter-rouge">rails_helper.rb</code>に</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">truncation: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span><span class="p">,</span> <span class="p">{</span><span class="ss">except: </span><span class="n">except_tables</span><span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p>を追加して、<code class="language-plaintext highlighter-rouge">AUTOCOMMIT</code>が行われるテストケースに</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="s1">'performs AUTOCOMMIT'</span><span class="p">,</span> <span class="ss">truncation: </span><span class="kp">true</span> <span class="k">do</span>
  <span class="o">...</span>
<span class="k">end</span></code></pre></figure>

<p>と<code class="language-plaintext highlighter-rouge">truncation: true</code>を設定します。</p>

<p>こうするとこのテストケースはtruncation strategyで実行するのでAUTOCOMMITされたデータも削除してくれます。</p>

<h2 id="autocommitされるテストケースを見つける">AUTOCOMMITされるテストケースを見つける</h2>

<p>ただ、どのテストケースで<code class="language-plaintext highlighter-rouge">AUTOCOMMIT</code>が行われているのかをひとつひとつ確認するのは大変です。</p>

<p>なので、各テストケース終了後にデータが残っていないか確認するようにしておくと便利です。</p>

<p>例えば</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
  <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean</span>
  <span class="p">[</span><span class="no">Blog</span><span class="o">::</span><span class="no">User</span><span class="p">,</span> <span class="no">Blog</span><span class="o">::</span><span class="no">Tag</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
    <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2"> exists after example"</span> <span class="k">if</span> <span class="n">model</span><span class="p">.</span><span class="nf">unscoped</span><span class="p">.</span><span class="nf">exists?</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>のようにしておくと、各テストケースの実行後にデータが残っている場合にちゃんとテストを失敗させることができます。</p>

<p>ちなみに<code class="language-plaintext highlighter-rouge">unscoped</code>は<code class="language-plaintext highlighter-rouge">default_scope</code>の影響を除外するために追加しています。</p>

<p>問題のあるテストケースが見つかれば、あとは<code class="language-plaintext highlighter-rouge">truncation: true</code>を設定するだけです。</p>

<h3 id="チェックするモデルの選び方">チェックするモデルの選び方</h3>

<p>全てのモデルのチェックをテスト実行毎に行うとテスト実行時間が長くなってしまうので、必要なモデルだけチェックするようにしましょう。</p>

<p>例えば<code class="language-plaintext highlighter-rouge">Blog::Site</code>が<code class="language-plaintext highlighter-rouge">Blog::User</code>に依存している場合は<code class="language-plaintext highlighter-rouge">Blog::Site</code>のチェックは不要です。</p>

<p>依存先がないモデルは全てチェックした方が良いのですが、全モデルのチェックは問題があった時に行うだけにして、毎回チェックするモデルは絞り込みましょう。</p>

<h2 id="まとめ">まとめ</h2>

<p>テスト後にデータが残っていると<code class="language-plaintext highlighter-rouge">AUTOCOMMIT</code>されたテストケースは成功するのに、その後で別のテストが失敗したりするので原因を探すのが結構大変です。</p>

<p>しかもテストの実行順によって時々失敗したり、失敗するテストケースも異なったりします。</p>

<p>この状態で放置しているとCIが機能しなくなってしまうので、<code class="language-plaintext highlighter-rouge">AUTOCOMMIT</code>したデータはしっかり削除するようにしましょう。</p>

<p>最後に最終的な<code class="language-plaintext highlighter-rouge">rails_helper.rb</code>の内容も載せておきます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="o">...</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>

  <span class="n">except_tables</span> <span class="o">=</span> <span class="sx">%w(blog_categories)</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
    <span class="c1"># db/seeds.rbでblog_categoriesテーブルのデータを設定</span>
    <span class="nb">load</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'db'</span><span class="p">,</span> <span class="s1">'seeds.rb'</span><span class="p">)</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean_with</span><span class="p">(</span><span class="ss">:truncation</span><span class="p">,</span> <span class="ss">except: </span><span class="n">except_tables</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">truncation: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span><span class="p">,</span> <span class="p">{</span><span class="ss">except: </span><span class="n">except_tables</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span><span class="p">,</span> <span class="p">{</span><span class="ss">except: </span><span class="n">except_tables</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">start</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:example</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean</span>
    <span class="p">[</span><span class="no">Blog</span><span class="o">::</span><span class="no">User</span><span class="p">,</span> <span class="no">Blog</span><span class="o">::</span><span class="no">Tag</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
      <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2"> exists after example"</span> <span class="k">if</span> <span class="n">model</span><span class="p">.</span><span class="nf">unscoped</span><span class="p">.</span><span class="nf">exists?</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1">## スマホ版のfeature specを書く場合などは以下の設定もしておく</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">before</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">type: :mobile</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Capybara</span><span class="p">.</span><span class="nf">current_driver</span> <span class="o">=</span> <span class="ss">:mobile_client</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">after</span><span class="p">(</span><span class="ss">:example</span><span class="p">,</span> <span class="ss">type: :mobile</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">Capybara</span><span class="p">.</span><span class="nf">use_default_driver</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>]]></content><author><name></name></author><category term="RSpec" /><category term="Rails" /><category term="Ruby" /><summary type="html"><![CDATA[RSpecでテストをする際にDatabaseCleanerを使うとテストケース毎にデータを削除してくれて非常に便利なのですが、transaction strategyで実行している場合にAUTOCOMMITされたデータが削除されず、その結果テストが失敗してしまう場合があります。今回はその対処方法をまとめてみました。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.enogineer.com/rails.png" /><media:content medium="image" url="http://blog.enogineer.com/rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Doorkeeper2.1.4でコンソールからOAuth2.0認証API用のアクセストークンを発行してみた</title><link href="http://blog.enogineer.com/2015/04/25/doorkeeper-api/" rel="alternate" type="text/html" title="Doorkeeper2.1.4でコンソールからOAuth2.0認証API用のアクセストークンを発行してみた" /><published>2015-04-25T11:28:33+09:00</published><updated>2015-04-25T11:28:33+09:00</updated><id>http://blog.enogineer.com/2015/04/25/doorkeeper-api</id><content type="html" xml:base="http://blog.enogineer.com/2015/04/25/doorkeeper-api/"><![CDATA[<p><a href="/tags/rails/">Rails</a> / <a href="/tags/ruby/">Ruby</a> / <a href="/tags/oauth2/">OAuth2.0</a></p>

<p>Doorkeeperを使うとデフォルトの認証画面を使うのが定番のようですが、自前で認証画面を用意したりRakeタスクでアクセストークンを発行したいことがあったりします。</p>

<p>ということで、Railsコンソールからアクセストークンの発行までやってみました。</p>

<h2 id="doorkeeper-インストール">Doorkeeper インストール</h2>

<p>まずはRailsプロジェクトのGemfileにDoorkeeper gemを追加して<code class="language-plaintext highlighter-rouge">bundle install</code>します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Gemfile</span>
<span class="n">gem</span> <span class="s1">'doorkeeper'</span></code></pre></figure>

<p>今回はdoorkeeper-2.1.4が入りました。</p>

<p>続いてActiveRecord用の設定＆テーブルを作成します。</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">$ rails generate doorkeeper:install
$ rails generate doorkeeper:migration
$ rails db:migrate</code></pre></figure>

<p>こうするとデータベースに</p>

<ul>
  <li>oauth_applications</li>
  <li>oauth_access_grants</li>
  <li>oauth_access_tokens</li>
</ul>

<p>というテーブルが作られます。</p>

<h3 id="doorkeeperを設定">Doorkeeperを設定</h3>

<p>Doorkeeperをインストールすると<code class="language-plaintext highlighter-rouge">config/initializers/doorkeeper.rb</code>に設定ファイルも作られます。</p>

<p>Deviseユーザーを認証する場合は</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/initializers/doorkeeper.rb</span>
<span class="n">resource_owner_authenticator</span> <span class="k">do</span>
  <span class="n">current_user</span> <span class="o">||</span> <span class="n">warden</span><span class="p">.</span><span class="nf">authenticate!</span><span class="p">(</span><span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure>

<p>という感じで<code class="language-plaintext highlighter-rouge">resource_owner_authenticator</code>を設定します。</p>

<p>また、インストール時に<code class="language-plaintext highlighter-rouge">config/routes.rb</code>も更新されますが、今回はDoorkeeperのアプリケーションは使わないので元に戻しておきます。</p>

<h3 id="oauth2アプリケーションの作成">OAuth2アプリケーションの作成</h3>

<p>続いてRails ConsoleからOAuth2アプリケーションを作成します。</p>

<p>ActiveRecordの場合は<code class="language-plaintext highlighter-rouge">Doorkeeper::Application</code>オブジェクトを作ればOKです。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">client</span> <span class="o">=</span> <span class="no">Doorkeeper</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'アプリケーション名'</span><span class="p">,</span> <span class="ss">redirect_uri: </span><span class="s1">'認証後のリダイレクトURL'</span><span class="p">)</span></code></pre></figure>

<p>作成したアプリケーションのID（Client ID）とClient Secretを確認します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">client</span><span class="p">.</span><span class="nf">uid</span>
<span class="o">=&gt;</span> <span class="s2">"094ce26134c0cbee97c91511b7f91137cb1963d7186066948b3126bb8e0f3ad76fce522e01634ee51e20954977c5b77f45b682c1ff4570a66598fcf19699d23b"</span>
<span class="o">&gt;</span> <span class="n">client</span><span class="p">.</span><span class="nf">secret</span>
<span class="o">=&gt;</span> <span class="s2">"49f947fceebbfd3c5e8100cbde8e410530e6a7a0d1c5a9af90705760968af4e6e719ec1776e49bf2f21673868f0ce2aa5d24fe697229e6fc6d3661614fded3cd"</span></code></pre></figure>

<p>ということで無事OAuth2認証用アプリケーションが作成できました。</p>

<h3 id="認証コードの生成">認証コードの生成</h3>

<p>続いて認証コードの生成です。</p>

<p>認証コードの生成には<code class="language-plaintext highlighter-rouge">Doorkeeper::OAuth::CodeRequest</code>クラスを使います。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">params</span> <span class="o">=</span>
  <span class="no">ActionController</span><span class="o">::</span><span class="no">Parameters</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
    <span class="ss">client_id: </span><span class="n">client</span><span class="p">.</span><span class="nf">uid</span><span class="p">,</span>
    <span class="ss">redirect_uri: </span><span class="n">client</span><span class="p">.</span><span class="nf">redirect_uri</span><span class="p">,</span>
    <span class="ss">response_type: </span><span class="s1">'code'</span>
  <span class="p">)</span>

<span class="n">pre_auth</span> <span class="o">=</span> <span class="no">Doorkeeper</span><span class="o">::</span><span class="no">OAuth</span><span class="o">::</span><span class="no">PreAuthorization</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Doorkeeper</span><span class="p">.</span><span class="nf">configuration</span><span class="p">,</span> <span class="n">client</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>

<span class="n">request</span> <span class="o">=</span> <span class="no">Doorkeeper</span><span class="o">::</span><span class="no">OAuth</span><span class="o">::</span><span class="no">CodeRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">pre_auth</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">authorize</span> <span class="c1"># Doorkeeper::OAuth::CodeResponseオブジェクト</span>

<span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">auth</span> <span class="c1"># Doorkeeper::OAuth::Authorization::Codeオブジェクト</span>

<span class="n">grant</span> <span class="o">=</span> <span class="n">code</span><span class="p">.</span><span class="nf">token</span> <span class="c1"># Doorkeeper::AccessGrantオブジェクト</span></code></pre></figure>

<p>こんな感じで<code class="language-plaintext highlighter-rouge">Doorkeeper::AccessGrant</code>モデルのオブジェクトを取得します。</p>

<p>取得した認証コードを確認してみます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">grant</span><span class="p">.</span><span class="nf">token</span>
<span class="o">=&gt;</span> <span class="s2">"f001b3327b4f13f6aea35ffea3601f5d2eea0e18fa5393f928e25b52a314df36"</span></code></pre></figure>

<h2 id="アクセストークンの生成">アクセストークンの生成</h2>

<p>認証コードを取得したので、続いてアクセストークンを生成します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">params</span> <span class="o">=</span>
  <span class="no">ActionController</span><span class="o">::</span><span class="no">Parameters</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
    <span class="ss">client_id: </span><span class="n">client</span><span class="p">.</span><span class="nf">uid</span><span class="p">,</span>
    <span class="ss">client_secret: </span><span class="n">client</span><span class="p">.</span><span class="nf">secret</span><span class="p">,</span>
    <span class="ss">code: </span><span class="n">grant</span><span class="p">.</span><span class="nf">token</span><span class="p">,</span>
    <span class="ss">grant_type: </span><span class="s1">'authorization_code'</span><span class="p">,</span>
    <span class="ss">redirect_uri: </span><span class="n">client</span><span class="p">.</span><span class="nf">redirect_uri</span>
  <span class="p">)</span>

<span class="n">request</span> <span class="o">=</span>
  <span class="no">Doorkeeper</span><span class="o">::</span><span class="no">OAuth</span><span class="o">::</span><span class="no">AuthorizationCodeRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
    <span class="no">Doorkeeper</span><span class="p">.</span><span class="nf">configuration</span><span class="p">,</span>
    <span class="n">grant</span><span class="p">,</span>
    <span class="n">client</span><span class="p">,</span>
    <span class="n">params</span>
  <span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">authorize</span> <span class="c1"># Doorkeeper::OAuth::TokenResponseオブジェクト</span>
<span class="n">access_token</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">token</span> <span class="c1"># Doorkeeper::AccessTokenオブジェクト</span></code></pre></figure>

<p>取得したアクセストークンを確認してみます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="n">access_token</span><span class="p">.</span><span class="nf">token</span>
<span class="o">=&gt;</span> <span class="s2">"c8f32d02ea56979882ca8ee659a64b4088774a973655ba6cbf91ef1fcb0f739f"</span></code></pre></figure>

<p>これでOAuth2認証に必要なアクセストークンが手に入りました。</p>

<h2 id="oauth20認証対応のapiを作る">OAuth2.0認証対応のAPIを作る</h2>

<p>アクセストークンは作りましたが、APIがないと試せないのでGrapeを使って簡単なAPIを作ります</p>

<h3 id="grape-gemをインストール">Grape gemをインストール</h3>

<p>Gemfileにgrapeとgrape-active_model_serializersを追加して<code class="language-plaintext highlighter-rouge">bundle install</code>します。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Gemfile</span>
<span class="n">gem</span> <span class="s1">'grape'</span>
<span class="n">gem</span> <span class="s1">'grape-active_model_serializers'</span></code></pre></figure>

<p>バージョンはgrape-0.11.0, grape-active_model_serializers-1.3.2が入りました。</p>

<h3 id="api用のディレクトリを設定">API用のディレクトリを設定</h3>

<p><code class="language-plaintext highlighter-rouge">app/api</code>を読み込むようにします。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/application.rb</span>
<span class="o">...</span>
<span class="n">config</span><span class="p">.</span><span class="nf">paths</span><span class="p">.</span><span class="nf">add</span> <span class="s1">'app/api'</span><span class="p">,</span> <span class="ss">glob: </span><span class="s1">'**/*.rb'</span>
<span class="o">...</span></code></pre></figure>

<h3 id="サンプルapiを作成">サンプルAPIを作成</h3>

<p>とりあえず簡単なAPIを作ります。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/api/api.rb</span>
<span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
  <span class="n">prefix</span> <span class="s1">'api'</span>

  <span class="nb">format</span> <span class="ss">:json</span>
  <span class="n">formatter</span> <span class="ss">:json</span><span class="p">,</span> <span class="no">Grape</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">ActiveModelSerializers</span>
  <span class="n">content_type</span> <span class="ss">:json</span><span class="p">,</span> <span class="s1">'application/json; charset=UTF-8'</span>

  <span class="n">mount</span> <span class="no">V1</span><span class="o">::</span><span class="no">SampleAPI</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/api/v1/sample_api.rb</span>
<span class="nb">require</span> <span class="s1">'doorkeeper/grape/helpers'</span>

<span class="k">module</span> <span class="nn">V1</span>
  <span class="k">class</span> <span class="nc">SampleAPI</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
    <span class="c1">## OAuth2認証用の設定を追加</span>
    <span class="n">helpers</span> <span class="no">Doorkeeper</span><span class="o">::</span><span class="no">Grape</span><span class="o">::</span><span class="no">Helpers</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">doorkeeper_authorize!</span> <span class="p">}</span>

    <span class="n">version</span> <span class="s1">'v1'</span><span class="p">,</span> <span class="ss">using: :path</span>

    <span class="n">resource</span> <span class="ss">:samples</span> <span class="k">do</span>
      <span class="n">get</span> <span class="s1">'/'</span> <span class="k">do</span>
        <span class="p">{</span><span class="ss">foo: :bar</span><span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h3 id="サンプルapiにアクセスしてみる">サンプルAPIにアクセスしてみる</h3>

<p>APIにアクセスしてみると<code class="language-plaintext highlighter-rouge">401 Unauthorized</code>になっています。</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">$ curl -I http://localhost:3000/api/v1/samples/
HTTP/1.1 401 Unauthorized
...</code></pre></figure>

<h2 id="アクセストークンを使ってapiにアクセスしてみる">アクセストークンを使ってAPIにアクセスしてみる</h2>

<p>アクセストークンの発行もAPIの用意もできたので、OAuth2 gemを使ってAPIを呼び出してみます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'oauth2'</span>

<span class="n">client_id</span>     <span class="o">=</span> <span class="s1">'CLIENT_ID'</span>
<span class="n">client_secret</span> <span class="o">=</span> <span class="s1">'CLIENT_SECRET'</span>
<span class="n">site</span>          <span class="o">=</span> <span class="s1">'http://localhost:3000'</span>

<span class="n">client</span> <span class="o">=</span> <span class="no">OAuth2</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">client_id</span><span class="p">,</span> <span class="n">client_secret</span><span class="p">,</span> <span class="ss">:site</span> <span class="o">=&gt;</span> <span class="n">site</span><span class="p">)</span>

<span class="n">access_token</span> <span class="o">=</span> <span class="s1">'ACCESS_TOKEN'</span>

<span class="n">token</span> <span class="o">=</span> <span class="no">OAuth2</span><span class="o">::</span><span class="no">AccessToken</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">access_token</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/api/v1/samples'</span><span class="p">)</span></code></pre></figure>

<p>レスポンスの内容を確認してみます。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&gt;</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="s2">"foo"</span><span class="o">=&gt;</span><span class="s2">"bar"</span><span class="p">}</span></code></pre></figure>

<p>ちゃんとOAuth2認証APIを呼び出すことができました。</p>

<h3 id="まとめ">まとめ</h3>

<p>今回はDoorkeeper + GrapeでOAuth2認証APIを作ってみました。</p>

<p>認証機能付きAPIだと定番かと思いますのでよろしければご参考にどうぞ。</p>

<h3 id="おまけ">おまけ</h3>

<p>今回GrapeでAPIを作りましたが、最初に試した時はGrapeのバージョンが古くて</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">undefined local variable or method `settings' for #&lt;Grape::Endpoint:0x007fb15f9fa7c8&gt;</code></pre></figure>

<p>とか</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">undefined method `head' for #&lt;Grape::Endpoint:0x007f9f172bd280&gt;</code></pre></figure>

<p>というエラーが出たりしました。</p>

<p>こういう時は<code class="language-plaintext highlighter-rouge">bundle update grape grape-active_model_serializers</code>でバージョンを上げればOKです。</p>

<p>また、<code class="language-plaintext highlighter-rouge">grape-active_model_serializers</code>のバージョンを上げると<code class="language-plaintext highlighter-rouge">active_model_serializers</code>のバージョンも上がります。</p>

<p>このとき古いDraperを使っている場合は</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">uninitialized constant ActiveModel::ArraySerializerSupport</code></pre></figure>

<p>というエラーが出たりします。</p>

<p>そういう場合は<code class="language-plaintext highlighter-rouge">bundle update draper</code>でDraperのバージョンも上げましょう。</p>]]></content><author><name></name></author><category term="Rails" /><category term="Ruby" /><category term="OAuth2.0" /><summary type="html"><![CDATA[OAuth2認証の定番Doorkeeper gemを使ってコンソールからアクセストークンを発行してみました。自前で認証画面を作る場合など参考になるかと思います。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.enogineer.com/rails.png" /><media:content medium="image" url="http://blog.enogineer.com/rails.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>